# tengine.conf - 优化的Tengine配置，包含国产化增强功能

# 工作进程数，通常设置为CPU核心数
worker_processes auto;

# 每个工作进程的最大连接数
events {
    worker_connections 1024;
    # 使用epoll事件模型（Linux下高效的事件处理机制）
    use epoll;
    # 尽可能多的接受连接
    multi_accept on;
}

http {
    # 包含MIME类型定义
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # 日志格式定义
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';

    # 访问日志
    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;

    # 性能优化配置
    sendfile on;                    # 启用高效文件传输
    tcp_nopush on;                  # 在sendfile开启的情况下，合并请求后发送
    tcp_nodelay on;                 # 不缓存数据，立即发送
    keepalive_timeout 65;           # 保持连接超时时间
    types_hash_max_size 2048;       # mime类型哈希表大小
    
    # 隐藏Nginx版本信息（安全性增强）
    server_tokens off;

    # Gzip压缩配置（提升传输效率）
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # 客户端请求体大小限制
    client_max_body_size 100M;
    client_body_timeout 60s;
    client_header_timeout 60s;
    
    # 缓存配置
    open_file_cache max=1000 inactive=20s;
    open_file_cache_valid 30s;
    open_file_cache_min_uses 2;
    open_file_cache_errors on;

    # Tengine特有功能：健康检查和负载均衡增强
    upstream backend_pool {
        server backend:5000 max_fails=3 fail_timeout=30s;
        # 如果有多个后端实例，可以在这里添加
        # server backend2:5000 max_fails=3 fail_timeout=30s;
        
        # Tengine特有的会话保持功能
        # session_sticky cookie=JSESSIONID;
        
        # Tengine的一致性哈希负载均衡
        # consistent_hash $remote_addr;
    }

    server {
        listen 80;
        server_name _;
        
        # 安全头设置
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;

        # 前端静态文件根目录
        root /usr/share/nginx/html;
        index index.html index.htm;

        # 静态资源缓存配置
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            access_log off;
        }

        # 处理前端路由（SPA应用）
        location / {
            try_files $uri $uri/ /index.html;
            
            # 为HTML文件添加缓存控制
            location ~* \.html$ {
                expires -1;
                add_header Cache-Control "no-cache, no-store, must-revalidate";
            }
        }

        # API代理配置 - 使用upstream
        location /api/ {
            proxy_pass http://backend_pool;
            
            # 代理头设置
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $server_name;
            
            # 超时设置
            proxy_connect_timeout 30s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # 缓冲设置
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
            
            # 错误处理
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
            proxy_next_upstream_tries 3;
            proxy_next_upstream_timeout 30s;
        }

        # 健康检查端点（Tengine特有功能）
        location /nginx_status {
            # 仅允许内网访问
            allow 127.0.0.1;
            allow 10.0.0.0/8;
            allow 172.16.0.0/12;
            allow 192.168.0.0/16;
            deny all;
            
            stub_status on;
            access_log off;
        }

        # 限制访问敏感文件
        location ~ /\.(ht|git|svn) {
            deny all;
            access_log off;
            log_not_found off;
        }

        # 自定义错误页面
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root /usr/share/nginx/html;
        }
    }

    # 如果需要HTTPS，取消注释以下配置
    # server {
    #     listen 443 ssl http2;
    #     server_name your-domain.com;
    #     
    #     ssl_certificate /path/to/your/cert.pem;
    #     ssl_certificate_key /path/to/your/key.pem;
    #     ssl_protocols TLSv1.2 TLSv1.3;
    #     ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;
    #     ssl_prefer_server_ciphers on;
    #     
    #     # 其他配置同HTTP...
    # }
}
